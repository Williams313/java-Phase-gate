Calculating Values to Store in an Array
import java.math.BigInteger;

import java.util.Iterator;

import java.util.Arrays;
import java.util.Random;


/**
1. Squares of numbers:
***********************
+++++++++++++++++++++++
*/
int[] squares = new int[5];
for (int i = 0; i < squares.length; i++) {
    squares[i] = (i + 1) * (i + 1);
}
System.out.println("Perfect squares: " + java.util.Arrays.toString(squares));


/**

2. Fibonacci sequence:
***********************
+++++++++++++++++++++++



int[] fib = new int[10];
fib[0] = 0;
fib[1] = 1;
for (int i = 2; i < fib.length; i++) {
    fib[i] = fib[i-1] + fib[i-2];

Here are s ome common Fibonacci-related interview questions in Java:


7Basic Questions


1. Write a Java program to generate the first n Fibonacci numbers.
2. Implement a recursive function to calculate the nth Fibonacci number.
3. Create an iterative solution to find the nth Fibonacci number.


Moderate Questions


1. Write a Java function to check if a given number is a Fibonacci number.
2. Find the first duplicate in a Fibonacci sequence generated by a Java program.
3. Implement a memoization technique to optimize Fibonacci number calculation.


Advanced Questions


1. Design a Java class to generate Fibonacci numbers using an iterator.
2. Write a multithreaded Java program to calculate Fibonacci numbers concurrently.
3. Implement a dynamic programming approach to find the nth Fibonacci number.


Example Questions with Solutions


Basic Question

Write a Java program to generate the first n Fibonacci numbers.


public class Fibonacci {
    public static void main(String[] args) {
        int n = 10;
        long[] fib = new long[n];
        fib[0] = 0;
        fib[1] = 1;
        for (int i = 2; i < n; i++) {
            fib[i] = fib[i-1] + fib[i-2];
        }
        System.out.println(java.util.Arrays.toString(fib));
    }
}


Moderate Question

Write a Java function to check if a given number is a Fibonacci number.


public class FibonacciChecker {
    public static boolean isFibonacci(int num) {
        int a = 0, b = 1;
        while (b < num) {
            int sum = a + b;
            a = b;
            b = sum;
        }
        return b == num;
    }
    public static void main(String[] args) {
        System.out.println(isFibonacci(13)); // true
        System.out.println(isFibonacci(14)); // false
    }
}


Advanced Question

Design a Java class to generate Fibonacci numbers using an iterator.


import java.util.Iterator;
import java.util.NoSuchElementException;

public class FibonacciIterator implements Iterator<Integer> {
    private int a = 0, b = 1;
    @Override
    public boolean hasNext() {
        return true;
    }
    @Override
    public Integer next() {
        if (!hasNext()) {
            throw new NoSuchElementException();
        }
        int sum = a;
        a = b;
        b = sum + b;
        return sum;
    }
    public static void main(String[] args) {
        FibonacciIterator iterator = new FibonacciIterator();
        for (int i = 0; i < 10; i++) {
            System.out.println(iterator.next());
        }
    }
}

}



3. Prime numbers:
*******************
+++++++++++++++++++



boolean[] primes = new boolean[100];
for (int i = 2; i < primes.length; i++) {
    primes[i] = true;
}
for (int i = 2; i < primes.length; i++) {
    if (primes[i]) {
        for (int j = i * 2; j < primes.length; j += i) {
            primes[j] = false;
        }
    }
}



4. Factorials:
****************
****************



 Factorial sums
        long[] factorialSums = new long[10];
        factorialSums[0] = 1;
        for (int i = 1; i < factorialSums.length; i++) {
            factorialSums[i] = factorialSums[i-1] * i + i;
        }
        System.out.println("Factorial sums: " + java.util.Arrays.toString(factorialSums));
}

ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥
Here are some Java interview questions related to factorial:
 

Basic Questions


1. Write a Java program to calculate the factorial of a given number.
2. Implement a recursive function to find the factorial of a number.
3. Calculate the factorial of a number using iteration.


Moderate Questions

     
1. Write a Java function to calculate the factorial of a large number (e.g., 100).
2. Implement memoization to optimize factorial calculation.
3. Calculate the factorial of a number using multithreading.


Advanced Questions


1. Design a Java class to calculate factorials using an iterator.
2. Implement a dynamic programming approach to calculate factorials.
3. Calculate the factorial of a number using Java 8 streams.


Example Questions with Solutions


Basic Question

Write a Java program to calculate the factorial of a given number.


public class Factorial {
    public static void main(String[] args) {
        int num = 5;
        int factorial = 1;
        for (int i = 1; i <= num; i++) {
            factorial *= i;
        }
        System.out.println("Factorial of " + num + " is " + factorial);
    }
}


Moderate Question

Write a Java function to calculate the factorial of a large number (e.g., 100).


import java.math.BigInteger;

public class LargeFactorial {
    public static BigInteger factorial(int n) {
        BigInteger fact = BigInteger.ONE;
        for (int i = 1; i <= n; i++) {
            fact = fact.multiply(BigInteger.valueOf(i));
        }
        return fact;
    }
    public static void main(String[] args) {
        System.out.println(factorial(100));
    }
}


Advanced Question

Design a Java class to calculate factorials using an iterator.


import java.util.Iterator;
import java.util.NoSuchElementException;

public class FactorialIterator implements Iterator<BigInteger> {
    private int current = 1;
    private BigInteger factorial = BigInteger.ONE;

    @Override
    public boolean hasNext() {
        return true;
    }

    @Override
    public BigInteger next() {
        if (!hasNext()) {
            throw new NoSuchElementException();
        }
        BigInteger result = factorial;
        factorial = factorial.multiply(BigInteger.valueOf(current));
        current++;
        return result;
    }
    public static void main(String[] args) {
        FactorialIterator iterator = new FactorialIterator();
        for (int i = 0; i < 10; i++) {
            System.out.println(iterator.next());
        }
    }
}



Would you like me to explain any of these concepts further?



5. Powers of 2:
++++++++++++++++
++++++++++++++++++



Powers of 2
        int[] powers = new int[10];
        for (int i = 0; i < powers.length; i++) {
            powers[i] = (int) Math.pow(2, i);
        }
        System.out.println("Powers of 2: " + java.util.Arrays.toString(powers));

}



6. Triangular numbers:
+++++++++++++++++++++++
++++++++++++++++++++++++



Triangular numbers
        int[] triangular = new int[10];
        triangular[0] = 1;
        for (int i = 1; i < triangular.length; i++) {
            triangular[i] = triangular[i-1] + i + 1;
        }
        System.out.println("Triangular numbers: " + java.util.Arrays.toString(triangular));

}



7. Perfect squares:
++++++++++++++++++++
+++++++++++++++++++++



 Perfect squares
        int[] squares = new int[10];
        for (int i = 0; i < squares.length; i++) {
            squares[i] = i * i;
        }
        System.out.println("Perfect squares: " + java.util.Arrays.toString(squares));

}



8. Cube roots:
+++++++++++++++++
+++++++++++++++++

  Cube roots
        double[] cubeRoots = new double[10];
        for (int i = 0; i < cubeRoots.length; i++) {
            cubeRoots[i] = Math.cbrt(i + 1);
        }
        System.out.println("Cube roots: " + java.util.Arrays.toString(cubeRoots));






9. Harmonic series:
++++++++++++++++++++++
++++++++++++++++++++

. Harmonic series
        double[] harmonic = new double[10];
        harmonic[0] = 1;
        for (int i = 1; i < harmonic.length; i++) {
            harmonic[i] = harmonic[i-1] + 1.0 / (i + 1);
        }
        System.out.println("Harmonic series: " + java.util.Arrays.toString(harmonic));

}



10. Geometric progression:
++++++++++++++++++++++++++
++++++++++++++++++++++++++++



Geometric progression
        double[] geometric = new double[10];
        geometric[0] = 2;
        for (int i = 1; i < geometric.length; i++) {
            geometric[i] = geometric[i-1] * 2;
        }
        System.out.println("Geometric progression: " + java.util.Arrays.toString(geometric));

}



11. Arithmetic progression:
+++++++++++++++++++++++++++
+++++++++++++++++++++++++++



Arithmetic progression
        int[] arithmetic = new int[10];
        arithmetic[0] = 2;
        for (int i = 1; i < arithmetic.length; i++) {
            arithmetic[i] = arithmetic[i-1] + 3;
        }
        System.out.println("Arithmetic progression: " + java.util.Arrays.toString(arithmetic));

}



12. Random integers:
++++++++++++++++++++
+++++++++++++++++++++



Random integers
        int[] random = new int[10];
        java.util.Random rand = new java.util.Random();
        for (int i = 0; i < random.length; i++) {
            random[i] = rand.nextInt(100);
        }
        System.out.println("Random integers: " + java.util.Arrays.toString(random));

}



Multidimensional Arrays Solved with Loops


13. 3D diagonal matrix:
++++++++++++++++++++++
++++++++++++++++++++++



int[][][] diagonal = new int[3][3][3];
for (int i = 0; i < diagonal.length; i++) {
    for (int j = 0; j < diagonal[i].length; j++) {
        for (int k = 0; k < diagonal[i][j].length; k++) {
            if (i == j && j == k) {
                diagonal[i][j][k] = 1;
            }
        }
    }
}



14. 2D sparse matrix:
+++++++++++++++++++++
++++++++++++++++++++++



int[][] sparse = new int[5][5];
for (int i = 0; i < sparse.length; i++) {
    for (int j = 0; j < sparse[i].length; j++) {
        if (i == j || i + j == sparse.length - 1) {
            sparse[i][j] = 1;
        }
    }
}



15. Jagged 2D array:
*******************
++++++++++++++++++++



int[][] jagged = new int[3][];
jagged[0] = new int[2];
jagged[1] = new int[4];
jagged[2] = new int[6];
for (int i = 0; i < jagged.length; i++) {
    for (int j = 0; j < jagged[i].length; j++) {
        jagged[i][j] = i + j;
    }
}



16. 4D hypercube:
******************
++++++++++++++++++


int[][][][] hypercube = new int[2][2][2][2];
for (int i = 0; i < hypercube.length; i++) {
    for (int j = 0; j < hypercube[i].length;
rification!}
*/